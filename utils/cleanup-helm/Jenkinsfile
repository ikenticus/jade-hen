#!/usr/bin/env groovy

import groovy.json.JsonSlurperClassic
import java.text.SimpleDateFormat

properties([
    disableConcurrentBuilds(),
    pipelineTriggers([cron('H 4 * * *')]),
    parameters([
        string(description: 'Namespace', name: 'namespace', defaultValue: 'test'),
        string(description: 'Days back', name: 'days', defaultValue: '14'),
        string(description: 'Skip branches', name: 'skip', defaultValue: 'dev,development,qa,release-candidate'),
    ])
])

podTemplate(label: 'jenkins-slave-helm', containers: [
    containerTemplate(name: 'helm', image: 'alpine/helm:2.14.0', command: 'cat', ttyEnabled: true)
]) {
    ansiColor('xterm') {
        node ('jenkins-slave-helm') {
            stage('Cleaning') {
                container('helm') {
                    // may need to upgrade tiller to access namespaces, depending on helm version
                    //sh 'helm init'
                    //sh 'helm init --service-account tiller --upgrade'

                    def excludes = skip.split(',')
                    def pastDate = new Date().minus(days.toInteger())
                    try {
                        def helmList = sh(returnStdout: true, script: "helm list --namespace ${namespace} --output json").trim()
                        def helmJson = new JsonSlurperClassic().parseText(helmList)
                        for (i = 0; i < helmJson.Releases.size(); i++) {
                            def helmChart = helmJson.Releases[i].Name
                            def helmFormat = new SimpleDateFormat("EEE MMM dd HH:mm:SS yyyy")
                            def helmDate = helmFormat.parse(helmJson.Releases[i].Updated)

                            def helmPrefix = helmJson.Releases[i].Chart.tokenize('-')[0..-2].join('-')
                            def helmBranch = helmChart.replace(helmPrefix+'-', '')
                            if (excludes.contains(helmBranch)) {
                                println "${helmChart} matches exclusion list"
                            } else if (helmDate >= pastDate) {
                                println "${helmChart} (${helmDate}) is newer than ${days} days"
                            } else {
                                println "${helmChart} (${helmDate}) is OLDER than ${days} days"
                                sh "helm delete ${helmChart} --purge"
                            }
                        }
                    } catch (e) {
                        echo "No helm deployments found in ${namespace}"
                    }
                }
            }
        }
    }
}
